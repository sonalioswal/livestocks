{"version":3,"sources":["component/stockItem/stockItem.js","component/stockList/stockList.js","component/liveStockUpdates/liveStockUpdates.js","App.js","serviceWorker.js","index.js"],"names":["StockItem","getStockValueColor","stock","currentValue","history","slice","value","this","props","stockName","stockData","id","toUpperCase","className","toFixed","moment","time","startOf","fromNow","Component","StockList","getStockList","stocks","Object","keys","map","index","currentStock","key","url","LiveStockUpdates","state","connectionError","componentDidMount","wsConnection","WebSocket","onmessage","saveLatestStockValues","onclose","setState","event","JSON","parse","data","currentTime","Date","now","newStocks","forEach","stockObj","assign","stockValue","Number","upValues","downValues","push","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAiCeA,G,iNA5BbC,mBAAqB,SAAAC,GACnB,OAAIA,EAAMC,aAAeD,EAAME,QAAQC,OAAO,GAAG,GAAGC,MAC3C,MACEJ,EAAMC,aAAeD,EAAME,QAAQC,OAAO,GAAG,GAAGC,MAClD,QAEA,M,wEAID,IAAD,EAC0BC,KAAKC,MAA9BC,EADD,EACCA,UAAWC,EADZ,EACYA,UACnB,OACE,wBAAIC,GAAIF,GACN,4BAAKA,EAAUG,eACf,wBAAIC,UAAWN,KAAKN,mBAAmBS,IACpCA,EAAUP,aAAaW,QAAQ,IAElC,4BACGC,IAAOL,EAAUN,QAAQC,OAAO,GAAG,GAAGW,MACpCC,UACAC,gB,GAtBWC,cCkCTC,G,uNAhCbC,aAAe,SAAAC,GACb,OAAOC,OAAOC,KAAKF,GAAQG,KAAI,SAAChB,EAAWiB,GACzC,IAAIC,EAAeL,EAAOb,GAC1B,OACE,kBAAC,EAAD,CAAWmB,IAAKF,EAAOjB,UAAWA,EAAWC,UAAWiB,Q,wEAM5D,OACE,yBAAKd,UAAU,SACb,yBAAKA,UAAU,gBACb,4CAEF,6BACE,+BACE,+BACE,4BACE,oCACA,qCACA,8CAGJ,+BAAQN,KAAKc,aAAad,KAAKC,MAAMc,gB,GAzBzBH,cCFlBU,EAAM,6BAmEGC,E,2MAhEbC,MAAQ,CACNT,OAAQ,GACRU,iBAAiB,G,EAGnBC,kBAAoB,WAClB,EAAKC,aAAe,IAAIC,UAAUN,GAClC,EAAKK,aAAaE,UAAY,EAAKC,sBACnC,EAAKH,aAAaI,QAAU,WAC1B,EAAKC,SAAS,CAAEP,iBAAiB,M,EAIrCK,sBAAwB,SAAAG,GACtB,IAAI9B,EAAY+B,KAAKC,MAAMF,EAAMG,MAE7BC,EAAcC,KAAKC,MACnBC,EAAY,EAAKhB,MAAMT,OAC3BZ,EAAUsC,SAAQ,SAAA9C,GAChB,IAAI+C,EAAW1B,OAAO2B,OAAO,GAAIhD,EAAO,CACtCO,UAAWP,EAAM,GACjBiD,WAAYjD,EAAM,KAEhB,EAAK6B,MAAMT,OAAO2B,EAASxC,YAC7BsC,EAAUE,EAASxC,WAAWN,aAAeiD,OAAOH,EAASE,YACzDE,EACAC,EAEJP,EAAUE,EAASxC,WAAWN,aAAeiD,OAC3CH,EAASE,YAEXJ,EAAUE,EAASxC,WAAWL,QAAQmD,KAAK,CACzCvC,KAAM4B,EACNtC,MAAO8C,OAAOH,EAASE,eAGzBJ,EAAUE,EAASxC,WAAa,CAC9BN,aAAc8C,EAASE,WACvB/C,QAAS,CACP,CACEY,KAAM6B,KAAKC,MACXU,KAAMP,EAASxC,UACfH,MAAO8C,OAAOH,EAASE,kBAMjC,EAAKZ,SAAS,CACZjB,OAAQyB,K,wEAKV,OACE,6BACE,6BACE,kBAAC,EAAD,CAAYzB,OAAQf,KAAKwB,MAAMT,e,GA1DVH,aCEhBsC,EAJH,WACV,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a6391468.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"./stockItem.scss\";\n\nclass StockItem extends Component {\n  getStockValueColor = stock => {\n    if (stock.currentValue < stock.history.slice(-2)[0].value) {\n      return \"red\";\n    } else if (stock.currentValue > stock.history.slice(-2)[0].value) {\n      return \"green\";\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    const { stockName, stockData } = this.props;\n    return (\n      <tr id={stockName}>\n        <td>{stockName.toUpperCase()}</td>\n        <td className={this.getStockValueColor(stockData)}>\n          {stockData.currentValue.toFixed(2)}\n        </td>\n        <td>\n          {moment(stockData.history.slice(-1)[0].time)\n            .startOf()\n            .fromNow()}\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default StockItem;\n","import React, { Component } from \"react\";\nimport StockItem from \"../stockItem/stockItem\";\nimport \"./stockList.scss\";\nimport \"../liveStockUpdates/liveStockUpdates.scss\";\n\nclass StockList extends Component {\n  getStockList = stocks => {\n    return Object.keys(stocks).map((stockName, index) => {\n      let currentStock = stocks[stockName];\n      return (\n        <StockItem key={index} stockName={stockName} stockData={currentStock} />\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"panel\">\n        <div className=\"panel-header\">\n          <h4>Live Stocks</h4>\n        </div>\n        <div>\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n                <th>Last Updated</th>\n              </tr>\n            </thead>\n            <tbody>{this.getStockList(this.props.stocks)}</tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StockList;\n","import React, { Component } from \"react\";\nimport StocksList from \"../stockList/stockList\";\n\nconst url = \"wss://stocks.mnet.website/\";\n\nclass LiveStockUpdates extends Component {\n  state = {\n    stocks: {},\n    connectionError: false\n  };\n\n  componentDidMount = () => {\n    this.wsConnection = new WebSocket(url);\n    this.wsConnection.onmessage = this.saveLatestStockValues;\n    this.wsConnection.onclose = () => {\n      this.setState({ connectionError: true });\n    };\n  };\n\n  saveLatestStockValues = event => {\n    let stockData = JSON.parse(event.data);\n    let [upValues, downValues] = [0, 0];\n    let currentTime = Date.now();\n    let newStocks = this.state.stocks;\n    stockData.forEach(stock => {\n      let stockObj = Object.assign({}, stock, {\n        stockName: stock[0],\n        stockValue: stock[1]\n      });\n      if (this.state.stocks[stockObj.stockName]) {\n        newStocks[stockObj.stockName].currentValue > Number(stockObj.stockValue)\n          ? upValues++\n          : downValues++;\n\n        newStocks[stockObj.stockName].currentValue = Number(\n          stockObj.stockValue\n        );\n        newStocks[stockObj.stockName].history.push({\n          time: currentTime,\n          value: Number(stockObj.stockValue)\n        });\n      } else {\n        newStocks[stockObj.stockName] = {\n          currentValue: stockObj.stockValue,\n          history: [\n            {\n              time: Date.now(),\n              name: stockObj.stockName,\n              value: Number(stockObj.stockValue)\n            }\n          ]\n        };\n      }\n    });\n    this.setState({\n      stocks: newStocks\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <StocksList stocks={this.state.stocks} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LiveStockUpdates;\n","import React from \"react\";\nimport LiveStockUpdates from \"./component/liveStockUpdates/liveStockUpdates\";\n\nconst App = () => {\n  return <LiveStockUpdates />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}